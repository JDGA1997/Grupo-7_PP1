# -*- coding: utf-8 -*-
"""limpieza de datos y analisis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1reV5LzEOH7b58r1CbMyVCZbp4t1CWEeE

INSTALAMOS LIBRERIAS
"""

!pip install pandas
!pip install openpyxl
!pip install matplotlib

"""IMPORTAMOS LAS LIBRERIAS"""

import folium
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import openpyxl
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
import geopandas as gpd
from shapely.geometry import Point

"""SUBIMOS EL DATA SET"""

from google.colab import files

# Subir un archivo CSV a Google Colab
uploaded = files.upload()

from google.colab import files
files.upload()

"""OBTENEMOS LOS DATOS Y CREAMOS EL DATAFRAME"""

import pandas as pd

# Datos que se utilizarán para el DataFrame
data = {
    'Nombre': ['Juan', 'María', 'Pedro', 'Lucía'],
    'Edad': [25, 30, 21, 28],
    'Puntuacion': [70, 85, 90, 80]
}

# Crear el DataFrame
dataframe = pd.DataFrame(data)

# Mostrar el DataFrame
print(dataframe)

"""pedimos datos estadisticos

"""

import pandas as pd


# Mostrar una vista previa de los primeros registros del DataFrame
print("DataFrame original:")
print(dataframe.head())

# Calcular la media y la desviación estándar de las columnas numéricas
media = dataframe.mean()
desviacion_estandar = dataframe.std()

# Definir el umbral para identificar valores anómalos (por ejemplo, basado en la desviación estándar)
umbral = 2  # Puedes ajustar este valor según tus necesidades

# Filtrar los valores anómalos basados en la desviación estándar
dataframe_limpio = dataframe[(dataframe > (media - umbral * desviacion_estandar)) & (dataframe < (media + umbral * desviacion_estandar))]

# Mostrar una vista previa del DataFrame después de la limpieza
print("\nDataFrame después de la limpieza de datos anómalos:")
print(dataframe_limpio.head())

"""obtenemos IQR"""

# Calcular el rango intercuartílico (IQR)
Q1 = dataframe.quantile(0.25)
Q3 = dataframe.quantile(0.75)
IQR = Q3 - Q1

# Identificar outliers basados en el rango intercuartílico
outliers = ((dataframe < (Q1 - 1.5 * IQR)) | (dataframe > (Q3 + 1.5 * IQR)))

# Mostrar los valores identificados como outliers
print("Valores identificados como outliers:")
print(outliers.sum())

# Filtrar y mostrar filas con outliers
filas_con_outliers = dataframe[outliers.any(axis=1)]
print("\nFilas con outliers:")
print(filas_con_outliers)

"""regresion lineal con variable independiente (año) y variable dependiente ( ventas)"""



